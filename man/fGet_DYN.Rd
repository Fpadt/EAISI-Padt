% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-access.R
\name{fGet_DYN}
\alias{fGet_DYN}
\title{Retrieve DYN Data from Dynasys}
\usage{
fGet_DYN(
  .vtype = NULL,
  .ftype = NULL,
  .material = NULL,
  .salesorg = NULL,
  .scope_matl = TRUE,
  .scope_sorg = TRUE,
  .cm_min = NULL,
  .cm_max = NULL,
  .step_min = NULL,
  .step_max = NULL,
  .lagg_min = NULL,
  .lagg_max = NULL,
  .n = Inf
)
}
\arguments{
\item{.vtype}{Character vector. Optional list of version types (e.g., actuals, forecasts). If \code{NULL}, all version types are retrieved.}

\item{.ftype}{Character vector. Optional list of forecast types. If \code{NULL}, all forecast types are retrieved.}

\item{.material}{Character vector. Optional list of materials to filter on. If \code{NULL}, no material-based filtering is applied beyond scope constraints.}

\item{.salesorg}{Character vector. Optional list of sales organizations to filter on. If \code{NULL}, no sales organization filtering is applied beyond scope constraints.}

\item{.scope_matl}{Logical. If \code{TRUE}, restricts the query to materials within the Pythia scope. Defaults to \code{TRUE}.}

\item{.scope_sorg}{Logical. If \code{TRUE}, restricts the query to sales organizations within the Pythia scope. Defaults to \code{TRUE}.}

\item{.cm_min}{Character or \code{NULL}. Minimal calendar month to filter data (e.g., "202301"). If \code{NULL}, no lower limit is applied.}

\item{.cm_max}{Character or \code{NULL}. Maximal calendar month to filter data (e.g., "202312"). If \code{NULL}, no upper limit is applied.}

\item{.step_min}{Numeric or \code{NULL}. Minimal forecast step ahead to filter data. If \code{NULL}, no lower limit is applied.}

\item{.step_max}{Numeric or \code{NULL}. Maximal forecast step ahead to filter data. If \code{NULL}, no upper limit is applied.}

\item{.lagg_min}{Numeric or \code{NULL}. Minimal difference between \code{VERSMON} and \code{MONTH}. If \code{NULL}, no lower limit is applied.}

\item{.lagg_max}{Numeric or \code{NULL}. Maximal difference between \code{VERSMON} and \code{MONTH}. If \code{NULL}, no upper limit is applied.}

\item{.n}{Numeric or \code{Inf}. Maximum number of rows to return. Defaults to \code{Inf}.}
}
\value{
A \code{data.table} containing the requested DYN data, with each row representing a combination of material, sales organization, and other attributes based on the query.
}
\description{
Fetches DYN (Dynamic) data from Dynasys using a DuckDB query. This function allows filtering based on various parameters such as version types, forecast types, materials, sales organizations, calendar months, forecast steps, and more.
}
\details{
This function constructs an SQL query using the provided parameters and executes it via DuckDB. It retrieves the specified data and returns it as a \code{data.table}.

The function assumes:
\itemize{
  \item A properly configured DuckDB connection.
  \item Accessible data files and configurations based on the user's environment.
}
}
\examples{
\dontrun{
# Fetch all DYN data
dyn_data <- fGet_DYN()

# Fetch data filtered by material and sales organization
dyn_data <- fGet_DYN(
  .material = c("MAT001", "MAT002"),
  .salesorg = c("SORG001", "SORG002")
)

# Fetch data for a specific version type and calendar month range
dyn_data <- fGet_DYN(
  .vtype = "FORECAST",
  .cm_min = "202301",
  .cm_max = "202312"
)
}

}
