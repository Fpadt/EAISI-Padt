% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/_exports.R, R/ingestion.R
\name{fGet_MAT}
\alias{fGet_MAT}
\title{Retrieve Material Master Data}
\usage{
fGet_MAT(
  .material = NULL,
  .salesorg = NULL,
  .scope_matl = TRUE,
  .scope_sorg = NULL,
  .ftype = c(1, 2, 3),
  .n = Inf
)

fGet_MAT(
  .material = NULL,
  .salesorg = NULL,
  .scope_matl = TRUE,
  .scope_sorg = NULL,
  .ftype = c(1, 2, 3),
  .n = Inf
)
}
\arguments{
\item{.material}{Character vector. An optional list of materials to filter on. If \code{NULL}, no material-based filtering is applied beyond scope constraints.}

\item{.salesorg}{Character vector. An optional list of sales organizations to filter on. If \code{NULL}, no sales organization filtering is applied beyond scope constraints.}

\item{.scope_matl}{Logical. If \code{TRUE}, restricts the query to materials within the Pythia scope. Defaults to \code{TRUE}.}

\item{.scope_sorg}{Logical. If \code{TRUE}, restricts the query to sales organizations within the Pythia scope. Defaults to \code{TRUE}.}

\item{.ftype}{Integer vector. Specifies the file types to query:
\itemize{
  \item \code{1}: Global material master data (MATL)
  \item \code{2}: Material master data per sales organization (MATS)
  \item \code{3}: Material master data per plant (MATP)
}
Defaults to \code{c(1, 2, 3)}.}

\item{.n}{Numeric or \code{Inf}. The maximum number of rows to return. Defaults to \code{Inf}.}
}
\value{
A \code{data.table} containing the requested material master data. Each row represents a material, with columns reflecting the dataset schema.

A \code{data.table} containing the requested material master data. Each row represents a material, with columns reflecting the dataset schema.
}
\description{
Fetches global material master data, material master data per sales organization, or material master data per plant from parquet files using a DuckDB query.

Fetches global material master data, material master data per sales organization, or material master data per plant from parquet files using a DuckDB query.
}
\details{
This function performs the following steps:
\enumerate{
  \item Retrieves configuration details, such as Common Table Expression (CTE) for scope materials and WHERE clause filters, using \code{.get_duckdb_parts()}.
  \item Dynamically determines the list of parquet files to query based on the specified file type (\code{.ftype}) using \code{.get_data_full_file_names()}.
  \item Constructs and executes an SQL query in DuckDB to fetch the requested material master data, applying the provided filters.
}

It assumes a properly configured DuckDB connection and accessible parquet files based on the user's environment configuration.

This function performs the following steps:
\enumerate{
  \item Retrieves configuration details, such as Common Table Expression (CTE) for scope materials and WHERE clause filters, using \code{.get_duckdb_parts()}.
  \item Dynamically determines the list of parquet files to query based on the specified file type (\code{.ftype}) using \code{.get_data_full_file_names()}.
  \item Constructs and executes an SQL query in DuckDB to fetch the requested material master data, applying the provided filters.
}

It assumes a properly configured DuckDB connection and accessible parquet files based on the user's environment configuration.
}
\examples{
\dontrun{
# Fetch all material master data
materials <- fGet_MAT()

# Fetch material data filtered by material and sales organization
materials <- fGet_MAT(
  .material = c("MAT001", "MAT002"),
  .salesorg = c("SORG001", "SORG002"),
  .n = 100
)

# Fetch only material master data per plant
materials <- fGet_MAT(.ftype = 3)
}

\dontrun{
# Fetch all material master data
materials <- fGet_MAT()

# Fetch material data filtered by material and sales organization
materials <- fGet_MAT(
  .material = c("MAT001", "MAT002"),
  .salesorg = c("SORG001", "SORG002"),
  .n = 100
)

# Fetch only material master data per plant
materials <- fGet_MAT(.ftype = 3)
}

}
