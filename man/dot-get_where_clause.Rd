% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pa_functions.R
\name{.get_where_clause}
\alias{.get_where_clause}
\title{Build a list of WHERE Clauses}
\usage{
.get_where_clause(
  .clauses = list(),
  .material = NULL,
  .salesorg = NULL,
  .scope_matl = FALSE,
  .scope_sorg = FALSE,
  .cm_min = NULL,
  .cm_max = NULL,
  .step_min = NULL,
  .step_max = NULL,
  .lagg_min = NULL,
  .lagg_max = NULL,
  .con = NULL
)
}
\arguments{
\item{clauses}{A list of existing WHERE clauses (character strings).}

\item{what}{A character string specifying which WHERE clause type to add.
For example, "material" may add a condition on the MATERIAL column.}

\item{apply_scope}{Logical. If `TRUE`, the function will add a scope-based
WHERE clause (e.g., filtering on MATERIAL) to `clauses`.}

\item{con}{An optional database connection object, used for safe
parameterization with \code{\link[glue]{glue_sql}}. Required if `apply_scope`
is \code{TRUE} and the `what` switch requires building an SQL clause.}
}
\value{
A (possibly modified) list of character strings representing WHERE
  clauses for a SQL query.
}
\description{
This internal helper function ensures that the first element in a list
of WHERE clauses is "TRUE" (which acts as a no-op condition) and then
optionally adds further constraints based on the `what` parameter.
}
\details{
\enumerate{
  \item The first WHERE clause is always "TRUE". If the provided \code{clauses}
        list does not have it, it will be appended automatically.
  \item Depending on the value of \code{what}, additional constraints can be
        appended to \code{clauses} using a \code{switch()} statement.
  \item For "material", if \code{apply_scope = TRUE}, a clause such as
        \code{"MATERIAL IN (SELECT MATERIAL FROM SCOPE_MATL)"} is appended.
}

You can extend the \code{switch()} statement to handle more cases, e.g.,
filtering on organizational data or other columns, if needed.
}
\examples{
# Minimal example (pseudo-code, no real DB connection):
my_clauses <- fGet_Where_Clause(clauses = list(), what = "material",
                                apply_scope = TRUE, con = NULL)
my_clauses

}
\keyword{internal}
